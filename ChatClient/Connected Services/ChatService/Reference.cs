//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.ChatService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectResult", Namespace="http://schemas.datacontract.org/2004/07/ChatLibrary.DataContracts.ServerModels")]
    [System.SerializableAttribute()]
    public partial class ConnectResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatClient.ChatService.ClientModel ClientModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatClient.ChatService.ConnectContract ContractField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatClient.ChatService.ClientModel ClientModel {
            get {
                return this.ClientModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientModelField, value) != true)) {
                    this.ClientModelField = value;
                    this.RaisePropertyChanged("ClientModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatClient.ChatService.ConnectContract Contract {
            get {
                return this.ContractField;
            }
            set {
                if ((object.ReferenceEquals(this.ContractField, value) != true)) {
                    this.ContractField = value;
                    this.RaisePropertyChanged("Contract");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientModel", Namespace="http://schemas.datacontract.org/2004/07/ChatLibrary.DataContracts.Common")]
    [System.SerializableAttribute()]
    public partial class ClientModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] ConversationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] Conversations {
            get {
                return this.ConversationsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConversationsField, value) != true)) {
                    this.ConversationsField = value;
                    this.RaisePropertyChanged("Conversations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectContract", Namespace="http://schemas.datacontract.org/2004/07/ChatLibrary.DataContracts.Common")]
    [System.SerializableAttribute()]
    public partial class ConnectContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ContractIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ContractID {
            get {
                return this.ContractIDField;
            }
            set {
                if ((this.ContractIDField.Equals(value) != true)) {
                    this.ContractIDField = value;
                    this.RaisePropertyChanged("ContractID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatModel", Namespace="http://schemas.datacontract.org/2004/07/ChatLibrary.DataContracts.Common")]
    [System.SerializableAttribute()]
    public partial class ChatModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] MembersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatClient.ChatService.ServerMessageModel[] MessagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsGroup {
            get {
                return this.IsGroupField;
            }
            set {
                if ((this.IsGroupField.Equals(value) != true)) {
                    this.IsGroupField = value;
                    this.RaisePropertyChanged("IsGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Members {
            get {
                return this.MembersField;
            }
            set {
                if ((object.ReferenceEquals(this.MembersField, value) != true)) {
                    this.MembersField = value;
                    this.RaisePropertyChanged("Members");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatClient.ChatService.ServerMessageModel[] Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerMessageModel", Namespace="http://schemas.datacontract.org/2004/07/ChatLibrary.DataContracts.ServerModels")]
    [System.SerializableAttribute()]
    public partial class ServerMessageModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ChatIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ChatId {
            get {
                return this.ChatIdField;
            }
            set {
                if ((this.ChatIdField.Equals(value) != true)) {
                    this.ChatIdField = value;
                    this.RaisePropertyChanged("ChatId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderName {
            get {
                return this.SenderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderNameField, value) != true)) {
                    this.SenderNameField = value;
                    this.RaisePropertyChanged("SenderName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientMessageModel", Namespace="http://schemas.datacontract.org/2004/07/ChatLibrary.DataContracts.ClientModels")]
    [System.SerializableAttribute()]
    public partial class ClientMessageModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ChatIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ChatId {
            get {
                return this.ChatIdField;
            }
            set {
                if ((this.ChatIdField.Equals(value) != true)) {
                    this.ChatIdField = value;
                    this.RaisePropertyChanged("ChatId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatService.IChatService", CallbackContract=typeof(ChatClient.ChatService.IChatServiceCallback))]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Connect", ReplyAction="http://tempuri.org/IChatService/ConnectResponse")]
        ChatClient.ChatService.ConnectResult Connect(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Connect", ReplyAction="http://tempuri.org/IChatService/ConnectResponse")]
        System.Threading.Tasks.Task<ChatClient.ChatService.ConnectResult> ConnectAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetChatById", ReplyAction="http://tempuri.org/IChatService/GetChatByIdResponse")]
        ChatClient.ChatService.ChatModel GetChatById(System.Guid chatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetChatById", ReplyAction="http://tempuri.org/IChatService/GetChatByIdResponse")]
        System.Threading.Tasks.Task<ChatClient.ChatService.ChatModel> GetChatByIdAsync(System.Guid chatId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Disconnect")]
        void Disconnect(ChatClient.ChatService.ConnectContract contract);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(ChatClient.ChatService.ConnectContract contract);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendMessage")]
        void SendMessage(ChatClient.ChatService.ConnectContract contract, ChatClient.ChatService.ClientMessageModel message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(ChatClient.ChatService.ConnectContract contract, ChatClient.ChatService.ClientMessageModel message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetAllClients", ReplyAction="http://tempuri.org/IChatService/GetAllClientsResponse")]
        ChatClient.ChatService.ClientModel[] GetAllClients(ChatClient.ChatService.ConnectContract contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetAllClients", ReplyAction="http://tempuri.org/IChatService/GetAllClientsResponse")]
        System.Threading.Tasks.Task<ChatClient.ChatService.ClientModel[]> GetAllClientsAsync(ChatClient.ChatService.ConnectContract contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetClientById", ReplyAction="http://tempuri.org/IChatService/GetClientByIdResponse")]
        ChatClient.ChatService.ClientModel GetClientById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetClientById", ReplyAction="http://tempuri.org/IChatService/GetClientByIdResponse")]
        System.Threading.Tasks.Task<ChatClient.ChatService.ClientModel> GetClientByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetConversation", ReplyAction="http://tempuri.org/IChatService/GetConversationResponse")]
        ChatClient.ChatService.ChatModel GetConversation(ChatClient.ChatService.ConnectContract contract, int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetConversation", ReplyAction="http://tempuri.org/IChatService/GetConversationResponse")]
        System.Threading.Tasks.Task<ChatClient.ChatService.ChatModel> GetConversationAsync(ChatClient.ChatService.ConnectContract contract, int clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendToServer")]
        void SendToServer(ChatClient.ChatService.ConnectContract contract, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendToServer")]
        System.Threading.Tasks.Task SendToServerAsync(ChatClient.ChatService.ConnectContract contract, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/ReceiveMessage")]
        void ReceiveMessage(ChatClient.ChatService.ConnectContract contract, ChatClient.ChatService.ServerMessageModel message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/OnClientConnect")]
        void OnClientConnect(ChatClient.ChatService.ConnectContract contract, ChatClient.ChatService.ClientModel client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/OnClientDisconnect")]
        void OnClientDisconnect(ChatClient.ChatService.ConnectContract contract, ChatClient.ChatService.ClientModel client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/ReceiveServerMessage")]
        void ReceiveServerMessage(ChatClient.ChatService.ConnectContract contract, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : ChatClient.ChatService.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<ChatClient.ChatService.IChatService>, ChatClient.ChatService.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public ChatClient.ChatService.ConnectResult Connect(string username) {
            return base.Channel.Connect(username);
        }
        
        public System.Threading.Tasks.Task<ChatClient.ChatService.ConnectResult> ConnectAsync(string username) {
            return base.Channel.ConnectAsync(username);
        }
        
        public ChatClient.ChatService.ChatModel GetChatById(System.Guid chatId) {
            return base.Channel.GetChatById(chatId);
        }
        
        public System.Threading.Tasks.Task<ChatClient.ChatService.ChatModel> GetChatByIdAsync(System.Guid chatId) {
            return base.Channel.GetChatByIdAsync(chatId);
        }
        
        public void Disconnect(ChatClient.ChatService.ConnectContract contract) {
            base.Channel.Disconnect(contract);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(ChatClient.ChatService.ConnectContract contract) {
            return base.Channel.DisconnectAsync(contract);
        }
        
        public void SendMessage(ChatClient.ChatService.ConnectContract contract, ChatClient.ChatService.ClientMessageModel message) {
            base.Channel.SendMessage(contract, message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(ChatClient.ChatService.ConnectContract contract, ChatClient.ChatService.ClientMessageModel message) {
            return base.Channel.SendMessageAsync(contract, message);
        }
        
        public ChatClient.ChatService.ClientModel[] GetAllClients(ChatClient.ChatService.ConnectContract contract) {
            return base.Channel.GetAllClients(contract);
        }
        
        public System.Threading.Tasks.Task<ChatClient.ChatService.ClientModel[]> GetAllClientsAsync(ChatClient.ChatService.ConnectContract contract) {
            return base.Channel.GetAllClientsAsync(contract);
        }
        
        public ChatClient.ChatService.ClientModel GetClientById(int id) {
            return base.Channel.GetClientById(id);
        }
        
        public System.Threading.Tasks.Task<ChatClient.ChatService.ClientModel> GetClientByIdAsync(int id) {
            return base.Channel.GetClientByIdAsync(id);
        }
        
        public ChatClient.ChatService.ChatModel GetConversation(ChatClient.ChatService.ConnectContract contract, int clientId) {
            return base.Channel.GetConversation(contract, clientId);
        }
        
        public System.Threading.Tasks.Task<ChatClient.ChatService.ChatModel> GetConversationAsync(ChatClient.ChatService.ConnectContract contract, int clientId) {
            return base.Channel.GetConversationAsync(contract, clientId);
        }
        
        public void SendToServer(ChatClient.ChatService.ConnectContract contract, string message) {
            base.Channel.SendToServer(contract, message);
        }
        
        public System.Threading.Tasks.Task SendToServerAsync(ChatClient.ChatService.ConnectContract contract, string message) {
            return base.Channel.SendToServerAsync(contract, message);
        }
    }
}
